package Example;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
    private static final boolean DEBUG = true;
    private static StringBuilder generatedPrettyText = new StringBuilder();
    public static String tab = "->";
    public static int mainLevel = 0;
	public static File file ;
	public static FileOutputStream fop;

    public static void main(String args[]) throws Exception {

		file = new File("out.txt");
		fop = new FileOutputStream(file);

		if (!file.exists()) {
			file.createNewFile();
		}

	    ComplexSymbolFactory complexSymbolFactor = new ComplexSymbolFactory();
	    FileInputStream fileInputStream = new FileInputStream(args[0]);
	    Scanner scanner = new Scanner(fileInputStream, complexSymbolFactor);
	    Parser parser = new Parser(scanner, complexSymbolFactor);

	    parser.parse();
		printPrettyText();

		printPrettyTextToFile();
    }

    public void syntax_error(Symbol sym){
	    if (DEBUG){
	    	printPrettyTextToFile();
	    }
	    System.out.print("PROBLEM: " + sym + " compiler has detected a syntax error at line " + sym
	    .left + " column " + sym.right);
    }

	public String makeNLIndent(){
		return "\n"+makeIndent();
	}

    public String makeIndent(){
    	if (DEBUG){
    		addPrettyText("L:"+mainLevel);
    	}
    	return String.join("", Collections.nCopies(mainLevel, tab));
    }

    public void increaseIndent(){
    	mainLevel++;
    	if (DEBUG){
    		addPrettyText("L+:"+mainLevel);
    	}
    }

    public void decreaseIndent(){
    	if (mainLevel > 0){
    		mainLevel--;
    	}
    	if (DEBUG){
    		addPrettyText("L-:"+mainLevel);
    	}
    }

	public void addPrettyText(String text){
		//generatedPrettyText.insert(0,text);
		generatedPrettyText.append(text);
	}

    public static void printPrettyText(){
    	System.out.println(generatedPrettyText.toString());
    }

    public static void printPrettyTextToFile() {
    	try {
			fop.write(generatedPrettyText.toString().getBytes());
			fop.flush();
			fop.close();
		} catch (Exception e){
		}
	}

:}

/* Terminals (tokens returned by the scanner). */
terminal STRING, NL, SPACE;

terminal SELECT, FROM, LJOIN, RJOIN, NJOIN, UNION, COMMA;

non terminal file, expr, initial;

non terminal String  text, spaceS, select1;

precedence left STRING, SELECT, SPACE, NL;

start with initial;
 initial  	::=   file
 				;

 file     	::=
 				| expr file
 				;

 expr		::=  text
             	;

  text ::=
  	SELECT:s
 		{: parser.addPrettyText(""+s); parser.increaseIndent();
 		parser.addPrettyText(""+parser.makeNLIndent()); :}
 	| SPACE FROM:s
 		{: parser.decreaseIndent(); parser.addPrettyText( parser.makeNLIndent()+s);	:}
 	| SPACE LJOIN:s
 		{: parser.addPrettyText( parser.makeNLIndent()+s); :}
 	| SPACE RJOIN:s
 		{: parser.addPrettyText( parser.makeNLIndent()+s); :}
 	| SPACE NJOIN:s
 		{: parser.addPrettyText( parser.makeNLIndent()+s); :}
 	| UNION:s
 		{: parser.addPrettyText("\n"+parser.makeNLIndent()+s+"\n"+parser.makeNLIndent()); :}
 	| SPACE COMMA:s
 		{: parser.addPrettyText( parser.makeNLIndent()+parser.makeIndent()+s); :}
 	| STRING:s
 		{: parser.addPrettyText(""+s); :}
 	| NL
 		{: parser.addPrettyText(" "); :}
 	| SPACE
 		{: parser.addPrettyText(" "); :}
 						;

 spaceS ::=    SPACE:s {: RESULT= " "; :}
           ;

