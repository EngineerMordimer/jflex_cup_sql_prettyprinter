package Example;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
    private static final boolean DEBUG = false;
    private static StringBuilder generatedPrettyText = new StringBuilder();
    public static String tab = "  ";
    public static int mainLevel = 0;
	public static File file ;
	public static FileOutputStream fop;

    public static void main(String args[]) throws Exception {

		file = new File("out.txt");
		fop = new FileOutputStream(file);

		if (!file.exists()) {
			file.createNewFile();
		}

	    ComplexSymbolFactory complexSymbolFactor = new ComplexSymbolFactory();
	    FileInputStream fileInputStream = new FileInputStream(args[0]);
	    Scanner scanner = new Scanner(fileInputStream, complexSymbolFactor);
	    Parser parser = new Parser(scanner, complexSymbolFactor);

	    parser.parse();
		printPrettyText();

		printPrettyTextToFile();


    }

    public void syntax_error(Symbol sym){
	    printPrettyTextToFile();
	    System.out.print("PROBLEM: " + sym + " compiler has detected a syntax error at line " + sym
	    .left + " column " + sym.right);
    }

    public String makeIndent(){
    	//addPrettyText("L:"+mainLevel);
    	return String.join("", Collections.nCopies(mainLevel, tab));
    }

    public void increaseIndent(){
    	mainLevel++;
    	//addPrettyText("L+:"+mainLevel);
    }

    public void decreaseIndent(){
    	if (mainLevel > 0){
    		mainLevel--;
    	}
    	//addPrettyText("L-:"+mainLevel);
    }

	public void addPrettyText(String text){
		//generatedPrettyText.insert(0,text);
		generatedPrettyText.append(text);
	}

    public static void printPrettyText(){
    	System.out.println(generatedPrettyText.toString());
    }

    public static void printPrettyTextToFile() {
    	try {
			fop.write(generatedPrettyText.toString().getBytes());
			fop.flush();
			fop.close();
		} catch (Exception e){
		}
	}

:}

/* Terminals (tokens returned by the scanner). */
terminal STRING, NL, SPACE;

terminal SELECT, FROM, LJOIN, RJOIN, NJOIN, UNION, COMMA;

non terminal file, expr, initial;

non terminal String textString, spaceS, select1;

precedence left STRING, SELECT, SPACE, NL;

start with initial;
 initial   ::=   file  {: System.out.print("Should ends"); :};

 file      ::= |
 				expr:e file  {: :};

 expr::=
             textString:t expr  {: :}

             ;

 textString ::= SELECT:s spaceS:sp
 	{: parser.addPrettyText(""+s+"\n"+parser.makeIndent()); parser.increaseIndent(); :}
 				| FROM:s spaceS:sp
 	{: parser.addPrettyText("\n"+s+sp);	parser.decreaseIndent(); RESULT=("\n"+s+sp); :}
 				| LJOIN:s spaceS:sp
 	{: parser.addPrettyText("\n"+s+sp); RESULT=("\n"+s+sp ); :}
 				| RJOIN:s spaceS:sp
 	{: parser.addPrettyText("\n"+s+sp); RESULT=("\n"+s+sp ); :}
 				| NJOIN:s spaceS:sp
 	{: parser.addPrettyText("\n"+s+sp); RESULT=("\n"+s+sp ); :}
 				| UNION:s spaceS:sp
 	{: parser.addPrettyText("\n\n"+s+sp+"\n\n"); RESULT=("\n\n"+s+sp+"\n\n" ); :}
 				| COMMA:s spaceS:sp
 	{: parser.addPrettyText("\n"+parser.makeIndent()+s+sp); :}
 				| STRING:s
 	{: parser.addPrettyText(""+s); RESULT=(""+s); :}
 				| STRING:s spaceS:sp
 	{: parser.addPrettyText(""+s+sp); RESULT=(""+s+sp); :}
 				| NL
 				| spaceS
 						;

 spaceS ::=    SPACE:s {: RESULT= " "; :}
           ;

